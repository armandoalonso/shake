// WARNING: DO NOT EDIT THIS FILE, IT IS AUTOGENERATED
module.exports = {
  addonType: "behavior",
  id: "piranha305_shake",
  name: "Shake",
  version: "1.0.0.0",
  category:
    // "attributes",
    "movements",
    // "other",
    // "general",
  author: "piranha305",
  website: "https://piranha305.itch.io/",
  documentation: "https://github.com/armandoalonso/shake/blob/main/README.md",
  description: "A Behavior that shakes the object, for Construct 3.",
  // addonUrl: "https://www.construct.net/en/make-games/addons/####/XXXX", // displayed in auto-generated docs
  githubUrl: "https://github.com/armandoalonso/shake", // displays latest release version in auto-generated docs
  // icon: "icon.svg", // defaults to "icon.svg" if omitted
  fileDependencies: [
    /*
    {
      filename: "filename.js", // no need to include "c3runtime/" prefix
      type:
        "copy-to-output"
        "inline-script"
        "external-dom-script"
        "external-runtime-script"
        "external-css"

      // for copy-to-output only
      // fileType: "image/png"
    }
    */
  ],
  info: {
    Set: {
      IsOnlyOneAllowed: false,
      CanBeBundled: true,
      IsDeprecated: false,
    },
  },
  properties: [
    {
      type: 'check',
      id: 'enabled',
      name: 'Enabled',
      desc: 'Enable or disable the shake behavior.',
      options: {
        initialValue: true
      }
    },
    {
      type: 'float',
      id: 'duration',
      name: 'Duration',
      desc: 'Duration of the shake in seconds.',
      options: {
        initialValue: 0.1,
      }
    },
    {
      type: 'float',
      id: 'magnitude',
      name: 'Magnitude',
      desc: 'Magnitude of the shake.',
      options: {
        initialValue: 10
      }
    },
    {
      type: 'combo',
      id: 'magnitudeMode',
      name: 'Magnitude Mode',
      desc: 'Magnitude mode. (Select if the magnitude is constant or decays over time)',
      options: {
        initialValue: 'decay',
        items: [
          { constant : "Constant" },
          { decay : "Decay" }
        ]
      }
    },
    {
      type: 'combo',
      id: 'shakeAxis',
      name: 'Shake Axis',
      desc: 'Shake axis. (Select which axis to offset)',
      options: {
        initialValue: 'xy',
        items: [
          { xy : "Shake XY Axis" },
          { x : "Shake Only X Axis" },
          { y : "Shake Only Y Axis" }
        ]
      }
    }    
    /*
    {
      type:
        "integer"
        "float"
        "percent"
        "text"
        "longtext"
        "check"
        "font"
        "combo"
        "group"
        "link"
        "info"

      id: "property_id",
      options: {
        initialValue: 0,
        interpolatable: false,

        // minValue: 0, // omit to disable
        // maxValue: 100, // omit to disable

        // for type combo only
        // items: [
        //   {itemId1: "item name1" },
        //   {itemId2: "item name2" },
        // ],

        // dragSpeedMultiplier: 1, // omit to disable

        // for type link only
        // linkCallback: `function(instOrObj) {}`,
        // linkText: "Link Text",
        // callbackType:
        //   "for-each-instance"
        //   "once-for-type"

        // for type info only
        // infoCallback: `function(inst) {}`,
      },
      name: "Property Name",
      desc: "Property Description",
    }
    */
  ],
  aceCategories: {
    // follows the format id: langName
    // in the ACEs refer to categories using the id, not the name
    general: "General",
    properties: "Properties",
  },
  Acts: {
    SetEnable: {
      category: "properties",
      forward: "_SetEnabled",
      autoScriptInterface: true,
      highlight: false,
      deprecated: false,
      params: [
        {
          id: "enabled",
          name: "Enabled",
          desc: "Enable or disable the shake behavior.",
          type: "boolean",
          value: "true",
        }
      ],
      listName: "Enable",
      displayText: "{my}: Enable ({0})",
      description: "Enable the behavior.",
    },
    StartShake: {
      category: "general",
      forward: "_StartShake",
      autoScriptInterface: true,
      highlight: true,
      deprecated: false,
      params: [],
      listName: "Start Shake",
      displayText: "{my}: Start Shake",
      description: "Start the shake.",
    },
    StopShake: {
      category: "general",
      forward: "_StopShake",
      autoScriptInterface: true,
      highlight: true,
      deprecated: false,
      params: [],
      listName: "Stop Shake",
      displayText: "{my}: Stop Shake",
      description: "Stop the shake.",
    },
    SetDuration: {
      category: "properties",
      forward: "_SetDuration",
      autoScriptInterface: true,
      highlight: false,
      deprecated: false,
      params: [
        {
          id: "duration",
          name: "Duration",
          desc: "Duration of the shake in seconds.",
          type: "number",
          value: "0.1",
        }
      ],
      listName: "Set Duration",
      displayText: "{my}: Set Duration ({0})",
      description: "Set the duration of the shake.",
    },
    SetMagnitude: {
      category: "properties",
      forward: "_SetMagnitude",
      autoScriptInterface: true,
      highlight: false,
      deprecated: false,
      params: [
        {
          id: "magnitude",
          name: "Magnitude",
          desc: "Magnitude of the shake.",
          type: "number",
          value: "10",
        }
      ],
      listName: "Set Magnitude",
      displayText: "{my}: Set Magnitude ({0})",
      description: "Set the magnitude of the shake.",
    },
    SetMagnitudeMode: {
      category: "properties",
      forward: "_SetMagnitudeMode",
      autoScriptInterface: true,
      highlight: false,
      deprecated: false,
      params: [
        {
          id: "magnitudeMode",
          name: "Magnitude Mode",
          desc: "Magnitude mode.",
          type: "combo",
          value: "decay",
          items: [
            {"constant" : "Constant"},
            {"decay" : "Decay"}
          ]
        }
      ],
      listName: "Set Magnitude Mode",
      displayText: "{my}: Set Magnitude Mode ({0})",
      description: "Set the magnitude mode of the shake. (Select if the magnitude is constant or decays over time)",
    },
    SetShakeAxis: {
      category: "properties",
      forward: "_SetShakeAxis",
      autoScriptInterface: true,
      highlight: false,
      deprecated: false,
      params: [
        {
          id: "shakeAxis",
          name: "Shake Axis",
          desc: "Shake axis.",
          type: "combo",
          value: "xy",
          items: [
            {"xy" : "Both XY"},
            {"x" : "Only X"},
            {"y" : "Only Y"}
          ]
        }
      ],
      listName: "Set Shake Axis",
      displayText: "{my}: Set Shake Axis ({0})",
      description: "Set the axis of the shake.",
    }

    /*
    SampleAction: {
      // The category of the action as it appears in the add action dialog
      category: "general",

      // Forward to the instance function name
      forward: "_SampleAction",
      // Or specify a handler function
      handler: `function () {
        // Your code here
      }`,

      // Set to true to automatically generate a script interface for this action
      // Cases where you might not want this are:
      // 1- If the action params are incompatible with the script interface
      // 2- If you don't want it to appear in the script interface
      // 3- If the script interface has a better way to achieve the same thing
      autoScriptInterface: true,

      // Set to true to highlight the action in the add action dialog
      highlight: true,

      // Set to true to hide the action in the interface. False by default if not specified.
      deprecated: false,

      // Marks the action as async. Defaults to false if not specified.
      isAsync: false,

      // list of parameters
      params: [
        {
          // The id of the parameter. This is used to generate the script interface.
          // It must be unique for each parameter.
          id: "param1",
          // The name of the parameter.
          name: "Param 1",
          // The description of the parameter.
          desc: "The first parameter",

          // The type of the parameter.
          type:
            // The following types can take a default value AND be automatically generated in the script interface
            - "string"
            - "number"
            - "any"
            - "boolean"

            // The following types can take a default value but CANNOT be automatically generated in the script interface
            - "combo"

            // The following types CANNOT take a default value AND CANNOT be automatically generated in the script interface
            - "cmp"
            - "object"
            - "objectname"
            - "layer"
            - "layout"
            - "keyb"
            - "instancevar"
            - "instancevarbool"
            - "eventvar"
            - "eventvarbool"
            - "animation"
            - "objinstancevar"

          // The default value of the parameter. Can be omitted if the type is not a string, number, any, boolean or combo.
          value: "the default value of the parameter",

          // Only for type "combo"
          items: [
            {"itemId1": "itemName1"},
            {"itemId2": "itemName2"},
            {"itemId3": "itemName3"},
          ],

          // Only for type "object"
          allowedPluginIds: ["Sprite", "TiledBg"],
        },
      ],

      // The name of the action as it appears in the add action dialog
      listName: "Sample Action",

      // The text that appears in the event sheet. Note, every single param must be used in the display text.
      // You can also use [b] and [i] tags.
      // You can also use the {my} tag to include the behavior icon and name.
      displayText: "{my}: Sample action [i]{0}[/i]",

      // The description of the action as it appears in the add action dialog
      description: "This is a sample action",
    },
    */
  },
  Cnds: {
    OnShakeEnd: {
      category: "general",
      forward: "_OnShakeEnd",
      autoScriptInterface: true,
      highlight: false,
      deprecated: false,
      params: [],
      isTrigger: true,
      listName: "On Shake End",
      displayText: "{my}: On Shake End",
      description: "Triggered when the shake ends.",
    },
    IsShaking: {
      category: "general",
      forward: "_IsShaking",
      autoScriptInterface: true,
      highlight: false,
      deprecated: false,
      params: [],
      listName: "Is Shaking",
      displayText: "{my}: Is Shaking",
      description: "Check if the shake is in progress.",
    }
    /*
    SampleCondition: {
      // The category of the action as it appears in the add condition dialog
      category: "general",

      // Forward to the instance function name
      forward: "_SampleAction",
      // Or specify a handler function
      handler: `function () {
        // Your code here
      }`,

      // Set to true to automatically generate a script interface for this condition
      // Cases where you might not want this are:
      // 1- If the condition params are incompatible with the script interface
      // 2- If you don't want it to appear in the script interface
      // 3- If the script interface has a better way to achieve the same thing
      autoScriptInterface: true,

      // Set to true to highlight the condition in the add condition dialog
      highlight: false,

      // Set to true to hide the condition in the interface. False by default if not specified.
      deprecated: false,

      // special conditions properties. These can all be omitted, and they will default to the following values:
      isTrigger: false,
      isFakeTrigger: false,
      isStatic: false,
      isLooping: false,
      isInvertible: true,
      isCompatibleWithTriggers: true,

      // list of parameters
      params: [
        {
          // The id of the parameter. This is used to generate the script interface.
          // It must be unique for each parameter.
          id: "param1",
          // The name of the parameter.
          name: "Param 1",
          // The description of the parameter.
          desc: "The first parameter",

          // The type of the parameter.
          type:
            // The following types can take a default value AND be automatically generated in the script interface
            - "string"
            - "number"
            - "any"
            - "boolean"

            // The following types can take a default value but CANNOT be automatically generated in the script interface
            - "combo"

            // The following types CANNOT take a default value AND CANNOT be automatically generated in the script interface
            - "cmp"
            - "object"
            - "objectname"
            - "layer"
            - "layout"
            - "keyb"
            - "instancevar"
            - "instancevarbool"
            - "eventvar"
            - "eventvarbool"
            - "animation"
            - "objinstancevar"

          // The default value of the parameter. Can be omitted if the type is not a string, number, any, boolean or combo.
          value: "the default value of the parameter",

          // Only for type "combo"
          items: [
            {"itemId1": "itemName1"},
            {"itemId2": "itemName2"},
            {"itemId3": "itemName3"},
          ],

          // Only for type "object"
          allowedPluginIds: ["Sprite", "TiledBg"],
        },
      ],

      // The name of the condition as it appears in the add condition dialog
      listName: "Sample Condition",

      // The text that appears in the event sheet. Note, every single param must be used in the display text.
      // You can also use [b] and [i] tags.
      // You can also use the {my} tag to include the behavior icon and name.
      displayText: "{my}: Sample condition [i]{0}[/i]",

      // The description of the condition as it appears in the add condition dialog
      description: "This is a sample condition",
    },
    */
  },
  Exps: {
    Duration: {
      category: "properties",
      forward: "_GetDuration",
      autoScriptInterface: true,
      returnType: "number",
      params: [],
      listName: "Duration",
      description: "Get the duration of the shake.",
    },
    RemainingDuration: {
      category: "properties",
      forward: "_GetRemainingDuration",
      autoScriptInterface: true,
      returnType: "number",
      params: [],
      highlight: false,
      deprecated: false,
      listName: "Remaining Duration",
      description: "Get the remaining duration of the shake.",
    },
    OriginX : {
      category: "properties",
      forward: "_GetOriginX",
      autoScriptInterface: true,
      returnType: "number",
      params: [],
      highlight: false,
      deprecated: false,
      listName: "Origin X",
      description: "Get the origin X of the shake.",
    },
    OriginY : {
      category: "properties",
      forward: "_GetOriginY",
      autoScriptInterface: true,
      returnType: "number",
      params: [],
      highlight: false,
      deprecated: false,
      listName: "Origin Y",
      description: "Get the origin Y of the shake.",
    }
    /*
    SampleExpression: {
      // The category of the action as it appears in the expression picker
      category: "general",

      // Forward to the instance function name
      forward: "_SampleAction",
      // Or specify a handler function
      handler: `function () {
        // Your code here
      }`,

      // Set to true to automatically generate a script interface for this expression
      // Cases where you might not want this are:
      // 1- If you don't want it to appear in the script interface
      // 2- If the script interface has a better way to achieve the same thing
      autoScriptInterface: true,

      // Set to true to highlight the expression in the expression picker
      highlight: false,

      // Set to true to hide the expression in the interface. False by default if not specified.
      deprecated: false,

      // The type of the expression.
      returnType:
        - "string"
        - "number"
        - "any" // must be either string or number

      // Set to true if the expression is variadic. False by default if not specified.
      isVariadicParameters: false

      // list of parameters
      params: [
        {
          // The id of the parameter. This is used to generate the script interface.
          // It must be unique for each parameter.
          id: "param1",
          // The name of the parameter.
          name: "Param 1",
          // The description of the parameter.
          desc: "The first parameter",

          // The type of the parameter.
          type:
            // The following types can take a default value AND be automatically generated in the script interface
            - "string"
            - "number"
            - "any"
        },
      ],

      // The description of the expression as it appears in the expression picker
      description: "This is a sample expression",
    },
    */
  },
};
